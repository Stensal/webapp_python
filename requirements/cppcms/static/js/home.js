/*
 The companion javascript of home.tmpl
This is a heavily revised version of root.js of Wandbox.org
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

function usage_model () {
    var usage = {
        lang: "C",
        source_code:
        "#include<stdio.h>\n" +
        "#include<stdlib.h>\n" +
        "int main (int argc, char ** argv)\n" +
        "{\n" +
        "  printf(\"Hello World!\\n\");\n" +
        "  int i, buf[10]; \n" +
        "  printf(\"type a number:\\n\");\n" +
        "  scanf (\"%d\", &i);\n" +
        "  printf(\"assigning %d to buf[%s].\\n\", i, argv[1]);\n" +
        "  /* this could cause memory corruption */\n" +
        "  buf[atoi(argv[1])] = i;\n" +
        "  return 0;\n" +
        "}\n",
        cli_arguments: "10",
        stdin: "8",
        console_messages : [],
        job_completion : "",
        context_reference : "",
    }
    return usage;
}

function display_compiling () {
    var compile = document.querySelector("#stensal-compile");
    compile.style.display = "none";
    var compiling = document.querySelector("#stensal-compiling");
    compiling.style.display = "block";
}

function display_ready_compiling() {
    var compile = document.querySelector("#stensal-compile");
    compile.style.display = "block";
    var compiling = document.querySelector("#stensal-compiling");
    compiling.style.display = "none";
}

function display_share_this () {
    var s = document.querySelector("#share_this_btn");
    s.style.display = "block";
    s = document.querySelector("#shared_url");
    s.style.display = "none";
}

function display_shared_url () {
    var s = document.querySelector("#share_this_btn");
    s.style.display = "none";
    s = document.querySelector("#shared_url");
    s.style.display = "block";
}

function hide_sharing() {
    var s = document.querySelector("#share_this_btn");
    s.style.display = "none";
    s = document.querySelector("#shared_url");
    s.style.display = "none";
}

function save(key, value) {
  // $.cookie(key, value, { expires: 365, path: $('body').attr('data-webroot') });
  localStorage.setItem(key, JSON.stringify(value));
}
function load(key) {
  // return $.cookie(key);
  return JSON.parse(localStorage.getItem(key));
}

function parse(str) {
    var index = str.indexOf(':');
    return {
        type: str.substring(0, index),
        message: str.substring(index + 1),
    };
}

function hyperlink_msg (msg, regex) {
    var msg1 = msg.replace(regex,
        "<a href='/notfound' class='src-line-info' onclick='highlightLine($2); return false;'>$1</a>");
    return msg1;
}

function hyperlink_stderr_msg(msg) {
    return hyperlink_msg(msg, /(prog.[c]+::([0-9]+))/g);
}

function hyperlink_compiler_err_msg(msg) {
    var msg1 = hyperlink_msg(msg, /(prog.[c]+:([0-9]+))/g);
    return msg1.replace(/__dts_wp__([a-zA-Z0-9_]*)_/g, '$1');
}

function populate_output(preview_paragraph, output, data) {
    var is_message = function(type) {
        return data.type == "CompilerMessageS" ||
            data.type == "CompilerMessageE" ||
            data.type == "StdOut" ||
            data.type == "StdErr";
    };

    var p =
        (is_message(data.type) &&
            preview_paragraph &&
            preview_paragraph.hasClass(data.type))
            ? preview_paragraph
            : $('<pre>').addClass(data.type).attr('data-type', data.type).attr('data-text', '').appendTo(output);
    p.attr('data-text', p.attr('data-text') + data.message);
    var ansi_up = new AnsiUp();
    var html_txt = ansi_up.ansi_to_html(p.attr('data-text'));

    if (data.type == "StdErr")
        html_txt = hyperlink_stderr_msg(html_txt);
    else if (data.type == "CompilerMessageE")
        html_txt = hyperlink_compiler_err_msg(html_txt);

    p.html(html_txt);
    preview_paragraph = p;
    output.scrollTop = output.scrollHeight;
    return p;
}

function populate_result(data_array) {
    var output = document.querySelector("#console_display");
    var data_array_length = data_array.length;
    for (var i = 0; i < data_array_length; ++i) {
        if (data_array[i].type == 'job_completed') {
            // don't display this
        } else {
            var preview_paragraph = null;
            preview_paragraph = populate_output(preview_paragraph, output, data_array[i]);
        }
    }
}


function post_code(lang, code, codes, cli_arguments, stdin, context_reference, finalize_callback) {
    src = new PostEventSource(URL_COMPILE, {
        lang: lang,
        source_code: code,
        source_codes: codes,
        stdin: stdin,
        cli_arguments: cli_arguments,
        context_reference : context_reference,
    });

    var finalize = function() {
        src.close();
        finalize_callback();
    };

    src.onmessage = function(msg) {
        var data = parse(msg.data);
        execution_panel_vue.console_messages.push(data);
        if (data.type == 'job_completed') {
            execution_panel_vue.job_completion = data.message;
            finalize();
        } else {
            var output = document.querySelector("#console_display");
            var preview_paragraph = null;
            preview_paragraph = populate_output(preview_paragraph, output, data);
        }
    };

    src.onerror = function() {
        finalize();
    }
}